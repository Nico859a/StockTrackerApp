@page "/auth"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<div class="auth-container">
    <h3 class="auth-title">@(isLogin ? "Login" : "Register")</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }

    <EditForm Model="@user" OnValidSubmit="HandleSubmit" class="auth-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="user.Username" required class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" @bind-Value="user.Password" required class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">@submitButtonText</button>
    </EditForm>

    <button @onclick="ToggleMode" class="btn btn-secondary toggle-button">@toggleButtonText</button>
</div>

@code {
    private UserModel user = new UserModel();
    private string errorMessage;
    private bool isLogin = true;

    private string submitButtonText => isLogin ? "Login" : "Register";
    private string toggleButtonText => isLogin ? "Switch to Register" : "Switch to Login";

    private void HandleSubmit()
    {
        if (isLogin)
        {
            if (AuthService.Login(user.Username, user.Password))
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        else
        {
            AuthService.Register(user.Username, user.Password);
            NavigationManager.NavigateTo("/auth");
        }
    }

    private void ToggleMode()
    {
        isLogin = !isLogin;
        errorMessage = string.Empty;
    }

    private class UserModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}

<style>
    .auth-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        background-color: #f9f9f9;
        text-align: center;
    }

    .auth-title {
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

        .form-group label {
            margin-bottom: 5px;
            display: block;
            font-size: 14px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
        font-size: 16px;
    }

    .btn {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        margin-top: 10px;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .error-message {
        color: red;
        font-size: 14px;
        margin-bottom: 15px;
    }
</style>